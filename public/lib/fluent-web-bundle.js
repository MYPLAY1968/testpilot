!function(t){var e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(r,s,function(e){return t[e]}.bind(null,s));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const r={ar:"ar-arab-eg","az-arab":"az-arab-ir","az-ir":"az-arab-ir",be:"be-cyrl-by",da:"da-latn-dk",el:"el-grek-gr",en:"en-latn-us",fa:"fa-arab-ir",ja:"ja-jpan-jp",ko:"ko-kore-kr",pt:"pt-latn-br",sr:"sr-cyrl-rs","sr-ru":"sr-latn-ru",sv:"sv-latn-se",ta:"ta-taml-in",uk:"uk-cyrl-ua",zh:"zh-hans-cn","zh-gb":"zh-hant-gb","zh-us":"zh-hant-us"},s=["az","bg","cs","de","es","fi","fr","hu","it","lt","lv","nl","pl","ro","ru"];const o=new RegExp("^([a-z]{2,3}|\\*)(?:-([a-z]{4}|\\*))?(?:-([a-z]{2}|\\*))?(?:-([a-z]{3}|\\*))?$","i"),a=["language","script","region","variant"];class i{constructor(t,e=!1){const n=o.exec(t.replace(/_/g,"-"));if(!n)return;const r=e?"*":void 0,s=n[1]||r,a=n[2]||r,i=n[3]||r,u=n[4]||r;this.language=s,this.script=a,this.region=i,this.variant=u,this.string=t}isEqual(t){return a.every(e=>this[e]===t[e])}matches(t){return a.every(e=>"*"===this[e]||"*"===t[e]||void 0===this[e]&&void 0===t[e]||void 0!==this[e]&&void 0!==t[e]&&this[e].toLowerCase()===t[e].toLowerCase())}setVariantRange(){this.variant="*"}setRegionRange(){this.region="*"}addLikelySubtags(){const t=function(t){if(r.hasOwnProperty(t))return new i(r[t]);const e=new i(t);return s.includes(e.language)?(e.region=e.language,e.string=`${e.language}-${e.region}`,e):null}(this.string.toLowerCase());return!!t&&(a.forEach(e=>this[e]=t[e]),this.string=t.string,!0)}}function u(t,e,n,r,s){let o=t[e];if(void 0!==o){if("boolean"===n?o=new Boolean(o):"string"===n&&(o=String(o)),void 0!==r&&-1===r.indexOf(o))throw new Error("Invalid option value");return o}return s}function l(t,e,n={}){const r=u(n,"defaultLocale","string"),s=(u(n,"likelySubtags","object",void 0),u(n,"strategy","string",["filtering","matching","lookup"],"filtering"));if("lookup"===s&&!r)throw new Error("defaultLocale cannot be undefined for strategy `lookup`");const o=function(t,e,n){const r=new Set,s=new Set(e.map(t=>new i(t,!0)));t:for(const o of t){const t=o.toLowerCase(),a=new i(t);if(void 0!==a.language){for(const o of e)if(t===o.toLowerCase()){r.add(o);for(const t of s)if(t.isEqual(a)){s.delete(t);break}if("lookup"===n)return Array.from(r);if("filtering"===n)continue;continue t}for(const t of s)if(a.matches(t)){if(r.add(t.string),s.delete(t),"lookup"===n)return Array.from(r);if("filtering"===n)continue;continue t}if(a.addLikelySubtags())for(const t of s)if(a.matches(t)){if(r.add(t.string),s.delete(t),"lookup"===n)return Array.from(r);if("filtering"===n)continue;continue t}a.setVariantRange();for(const t of s)if(a.matches(t)){if(r.add(t.string),s.delete(t),"lookup"===n)return Array.from(r);if("filtering"===n)continue;continue t}a.setRegionRange();for(const t of s)if(a.matches(t)){if(r.add(t.string),s.delete(t),"lookup"===n)return Array.from(r);if("filtering"===n)continue;continue t}}}return Array.from(r)}(Array.from(Object(t)).map(t=>String(t)),Array.from(Object(e)).map(t=>String(t)),s);return"lookup"===s?0===o.length&&o.push(r):r&&!o.includes(r)&&o.push(r),o}class c{constructor(t,e){this.value=t,this.opts=e}valueOf(){return this.value}toString(){throw new Error("Subclasses of FluentType must implement toString.")}}class f extends c{toString(){return this.value||"???"}}class h extends c{constructor(t,e){super(parseFloat(t),e)}toString(t){try{return t._memoizeIntlObject(Intl.NumberFormat,this.opts).format(this.value)}catch(t){return this.value}}}class d extends c{constructor(t,e){super(new Date(t),e)}toString(t){try{return t._memoizeIntlObject(Intl.DateTimeFormat,this.opts).format(this.value)}catch(t){return this.value}}}var m={NUMBER:([t],e)=>new h(t.valueOf(),g(t.opts,e)),DATETIME:([t],e)=>new d(t.valueOf(),g(t.opts,e))};function g(t,e){return Object.assign({},t,function(t){const e={};for(const[n,r]of Object.entries(t))e[n]=r.valueOf();return e}(e))}const p=2500,w="⁨",b="⁩";function y(t,e,n){if(n===e)return!0;if(n instanceof h&&e instanceof h&&n.value===e.value)return!0;if(e instanceof h&&"string"==typeof n){if(n===t._memoizeIntlObject(Intl.PluralRules,e.opts).select(e.value))return!0}return!1}function v(t,e,n){if(e[n])return x(t,e[n]);const{errors:r}=t;return r.push(new RangeError("No default")),new f}function E(t,e){const n=[],r={};if(e)for(const s of e)"narg"===s.type?r[s.name]=x(t,s.value):n.push(x(t,s));return[n,r]}function x(t,e){if("string"==typeof e)return t.bundle._transform(e);if(e instanceof f)return e;if(Array.isArray(e))return function(t,e){const{bundle:n,dirty:r,errors:s}=t;if(r.has(e))return s.push(new RangeError("Cyclic reference")),new f;r.add(e);const o=[],a=n._useIsolating&&e.length>1;for(const r of e){if("string"==typeof r){o.push(n._transform(r));continue}const e=x(t,r).toString(n);a&&o.push(w),e.length>p?(s.push(new RangeError("Too many characters in placeable "+`(${e.length}, max allowed is ${p})`)),o.push(e.slice(p))):o.push(e),a&&o.push(b)}return r.delete(e),o.join("")}(t,e);switch(e.type){case"str":return e.value;case"num":return new h(e.value);case"var":return function(t,{name:e}){const{args:n,errors:r}=t;if(!n||!n.hasOwnProperty(e))return r.push(new ReferenceError(`Unknown variable: ${e}`)),new f(`$${e}`);const s=n[e];if(s instanceof c)return s;switch(typeof s){case"string":return s;case"number":return new h(s);case"object":if(s instanceof Date)return new d(s);default:return r.push(new TypeError(`Unsupported variable type: ${e}, ${typeof s}`)),new f(`$${e}`)}}(t,e);case"term":return function(t,{name:e,attr:n,selector:r,args:s}){const{bundle:o,errors:a}=t,i=`-${e}`,u=o._terms.get(i);if(!u){const t=new ReferenceError(`Unknown term: ${i}`);return a.push(t),new f(i)}const[,l]=E(t,s),c={...t,args:l};if(n){const t=u.attrs&&u.attrs[n];return t?x(c,t):(a.push(new ReferenceError(`Unknown attribute: ${n}`)),x(c,u))}const h=function(t){const e=t.value||t;return Array.isArray(e)&&"select"===e[0].type&&null===e[0].selector?e[0]:null}(u);if(r&&h)return A(c,{...h,selector:r});return x(c,u)}({...t,args:{}},e);case"ref":return e.args?function(t,{name:e,args:n}){const{bundle:{_functions:r},errors:s}=t,o=r[e]||m[e];if(!o)return s.push(new ReferenceError(`Unknown function: ${e}()`)),new f(`${e}()`);if("function"!=typeof o)return s.push(new TypeError(`Function ${e}() is not callable`)),new f(`${e}()`);try{return o(...E(t,n))}catch(t){return new f}}(t,e):function(t,{name:e,attr:n}){const{bundle:r,errors:s}=t,o=r._messages.get(e);if(!o){const t=new ReferenceError(`Unknown message: ${e}`);return s.push(t),new f(e)}if(n){const e=o.attrs&&o.attrs[n];return e?x(t,e):(s.push(new ReferenceError(`Unknown attribute: ${n}`)),x(t,o))}return x(t,o)}(t,e);case"select":return A(t,e);case void 0:{if(null!==e.value&&void 0!==e.value)return x(t,e.value);const{errors:n}=t;return n.push(new RangeError("No value")),new f}default:return new f}}function A(t,{selector:e,variants:n,star:r}){if(null===e)return v(t,n,r);let s=x(t,e);if(s instanceof f){return x(t,v(t,n,r))}for(const e of n){const n=x(t,e.key);if(y(t.bundle,s,n))return x(t,e)}return x(t,v(t,n,r))}class k extends Error{}const O=/^(-?[a-zA-Z][\w-]*) *= */gm,S=/\.([a-zA-Z][\w-]*) *= */y,$=/\*?\[/y,I=/(-?[0-9]+(\.[0-9]+)?)/y,_=/([a-zA-Z][\w-]*)/y,R=/([$-])?([a-zA-Z][\w-]*)(?:\.([a-zA-Z][\w-]*))?/y,z=/([^{}\n\r]+)/y,C=/([^\\"\n\r]*)/y,M=/\\([\\"])/y,j=/\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{6})/y,N=/^\n+/,T=/ +$/,F=/ *\r?\n/g,L=/( *)$/,U=/{\s*/y,D=/\s*}/y,P=/\[\s*/y,q=/\s*] */y,V=/\s*\(\s*/y,W=/\s*->\s*/y,Z=/\s*:\s*/y,J=/\s*,?\s*/y,B=/\s+/y,K=100;class H extends Map{static fromString(t){O.lastIndex=0;let e=new this,n=0;for(;;){let r=O.exec(t);if(null===r)break;n=O.lastIndex;try{e.set(r[1],u())}catch(t){if(t instanceof k)continue;throw t}}return e;function r(e){return e.lastIndex=n,e.test(t)}function s(e,r){if(t[n]===e)return n++,!0;if(r)throw new r(`Expected ${e}`);return!1}function o(t,e){if(r(t))return n=t.lastIndex,!0;if(e)throw new e(`Expected ${t.toString()}`);return!1}function a(e){e.lastIndex=n;let r=e.exec(t);if(null===r)throw new k(`Expected ${e.toString()}`);return n=e.lastIndex,r}function i(t){return a(t)[1]}function u(){let t=l(),e=function(){let t={};for(;r(S);){let e=i(S),n=l();if(null===n)throw new k("Expected attribute value");t[e]=n}return Object.keys(t).length>0?t:null}();if(null===e){if(null===t)throw new k("Expected message value or attributes");return t}return{value:t,attrs:e}}function l(){if(r(z))var e=i(z);if("{"===t[n]||"}"===t[n])return c(e?[e]:[],1/0);let s=v();return s?e?c([e,s],s.length):(s.value=E(s.value,N),c([s],s.length)):e?E(e,T):null}function c(e=[],s){let o=0;for(;;){if(r(z)){e.push(i(z));continue}if("{"===t[n]){if(++o>K)throw new k("Too many placeables");e.push(f());continue}if("}"===t[n])throw new k("Unbalanced closing brace");let a=v();if(!a)break;e.push(a),s=Math.min(s,a.length)}let a=e.length-1;"string"==typeof e[a]&&(e[a]=E(e[a],T));let u=[];for(let t of e)"indent"===t.type?t=t.value.slice(0,t.value.length-s):"str"===t.type&&(t=t.value),t&&u.push(t);return u}function f(){o(U,k);let t=g();if(t)return o(D,k),{type:"select",selector:null,...t};let e=h();if(o(D))return e;if(o(W)){let t=g();return o(D,k),{type:"select",selector:e,...t}}throw new k("Unclosed placeable")}function h(){if("{"===t[n])return f();if(r(R)){let[,e,r,s=null]=a(R),i={$:"var","-":"term"}[e]||"ref";return"["===t[n]?{type:i,name:r,selector:p()}:o(V)?{type:i,name:r,attr:s,args:d()}:{type:i,name:r,attr:s,args:null}}return w()}function d(){let e=[];for(;;){switch(t[n]){case")":return n++,e;case void 0:throw new k("Unclosed argument list")}e.push(m()),o(J)}}function m(){let t=h();return"ref"!==t.type?t:o(Z)?{type:"narg",name:t.name,value:w()}:t}function g(){let t,e=[],n=0;for(;r($);){s("*")&&(t=n);let r=p(),o=l();if(null===o)throw new k("Expected variant value");e[n++]={key:r,value:o}}if(0===n)return null;if(void 0===t)throw new k("Expected default variant");return{variants:e,star:t}}function p(){o(P,k);let t=r(I)?b():i(_);return o(q,k),t}function w(){if(r(I))return b();if('"'===t[n])return function(){s('"',k);let e="";for(;;){if(e+=i(C),"\\"!==t[n]){if(s('"'))return{type:"str",value:e};throw new k("Unclosed string literal")}e+=y()}}();throw new k("Invalid expression")}function b(){return{type:"num",value:i(I)}}function y(){if(r(M))return i(M);if(r(j)){let[,t,e]=a(j),n=parseInt(t||e,16);return n<=55295||57344<=n?String.fromCodePoint(n):"�"}throw new k("Unknown escape sequence")}function v(){let e=n;switch(o(B),t[n]){case".":case"[":case"*":case"}":case void 0:return!1;case"{":return x(t.slice(e,n))}return" "===t[n-1]&&x(t.slice(e,n))}function E(t,e){return t.replace(e,"")}function x(t){return{type:"indent",value:t.replace(F,"\n"),length:L.exec(t)[1].length}}}}class X{constructor(t,{functions:e={},useIsolating:n=!0,transform:r=(t=>t)}={}){this.locales=Array.isArray(t)?t:[t],this._terms=new Map,this._messages=new Map,this._functions=e,this._useIsolating=n,this._transform=r,this._intls=new WeakMap}get messages(){return this._messages[Symbol.iterator]()}hasMessage(t){return this._messages.has(t)}getMessage(t){return this._messages.get(t)}addMessages(t){const e=H.fromString(t);return this.addResource(e)}addResource(t){const e=[];for(const[n,r]of t)if(n.startsWith("-")){if(this._terms.has(n)){e.push(`Attempt to override an existing term: "${n}"`);continue}this._terms.set(n,r)}else{if(this._messages.has(n)){e.push(`Attempt to override an existing message: "${n}"`);continue}this._messages.set(n,r)}return e}format(t,e,n){return"string"==typeof t?this._transform(t):null===t||null===t.value?null:"string"==typeof t.value?this._transform(t.value):function(t,e,n,r=[]){return x({bundle:t,args:e,errors:r,dirty:new WeakSet},n).toString(t)}(this,e,t,n)}_memoizeIntlObject(t,e){const n=this._intls.get(t)||{},r=JSON.stringify(e);return n[r]||(n[r]=new t(this.locales,e),this._intls.set(t,n)),n[r]}}const G=/<|&#?\w+;/,Q={"http://www.w3.org/1999/xhtml":["em","strong","small","s","cite","q","dfn","abbr","data","time","code","var","samp","kbd","sub","sup","i","b","u","mark","bdi","bdo","span","br","wbr"]},Y={"http://www.w3.org/1999/xhtml":{global:["title","aria-label","aria-valuetext","aria-moz-hint"],a:["download"],area:["download","alt"],input:["alt","placeholder"],menuitem:["label"],menu:["label"],optgroup:["label"],option:["label"],track:["label"],img:["alt"],textarea:["placeholder"],th:["abbr"]},"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul":{global:["accesskey","aria-label","aria-valuetext","aria-moz-hint","label"],key:["key","keycode"],textbox:["placeholder"],toolbarbutton:["tooltiptext"]}};function tt(t,e){const{value:n}=e;if("string"==typeof n)if(G.test(n)){const e=t.ownerDocument.createElementNS("http://www.w3.org/1999/xhtml","template");e.innerHTML=n,function(t,e){for(const n of t.childNodes)if(n.nodeType!==n.TEXT_NODE)if(n.hasAttribute("data-l10n-name")){const r=nt(e,n);t.replaceChild(r,n)}else if(ot(n)){const e=rt(n);t.replaceChild(e,n)}else console.warn(`An element of forbidden type "${n.localName}" was found in `+"the translation. Only safe text-level elements and elements with data-l10n-name are allowed."),t.replaceChild(st(n),n);e.textContent="",e.appendChild(t)}(e.content,t)}else t.textContent=n;et(e,t)}function et(t,e){const n=e.hasAttribute("data-l10n-attrs")?e.getAttribute("data-l10n-attrs").split(",").map(t=>t.trim()):null;for(const t of Array.from(e.attributes))at(t.name,e,n)&&e.removeAttribute(t.name);if(t.attributes)for(const r of Array.from(t.attributes))at(r.name,e,n)&&e.setAttribute(r.name,r.value)}function nt(t,e){const n=e.getAttribute("data-l10n-name"),r=t.querySelector(`[data-l10n-name="${n}"]`);return r?r.localName!==e.localName?(console.warn(`An element named "${n}" was found in the translation `+`but its type ${e.localName} didn't match the `+`element found in the source (${r.localName}).`),st(e)):(t.removeChild(r),it(e,r.cloneNode(!1))):(console.warn(`An element named "${n}" wasn't found in the source.`),st(e))}function rt(t){const e=t.ownerDocument.createElement(t.localName);return it(t,e)}function st(t){return t.ownerDocument.createTextNode(t.textContent)}function ot(t){const e=Q[t.namespaceURI];return e&&e.includes(t.localName)}function at(t,e,n=null){if(n&&n.includes(t))return!0;const r=Y[e.namespaceURI];if(!r)return!1;const s=t.toLowerCase(),o=e.localName;if(r.global.includes(s))return!0;if(!r[o])return!1;if(r[o].includes(s))return!0;if("http://www.w3.org/1999/xhtml"===e.namespaceURI&&"input"===o&&"value"===s){const t=e.type.toLowerCase();if("submit"===t||"button"===t||"reset"===t)return!0}return!1}function it(t,e){return e.textContent=t.textContent,et(t,e),e}class ut extends Array{static from(t){return t instanceof this?t:new this(t)}}class lt extends ut{constructor(t){if(super(),Symbol.asyncIterator in Object(t))this.iterator=t[Symbol.asyncIterator]();else{if(!(Symbol.iterator in Object(t)))throw new TypeError("Argument must implement the iteration protocol.");this.iterator=t[Symbol.iterator]()}}[Symbol.iterator](){const t=this;let e=0;return{next:()=>t.length===e?{value:void 0,done:!0}:t[e++]}}[Symbol.asyncIterator](){const t=this;let e=0;return{next:async()=>(t.length<=e&&t.push(await t.iterator.next()),t[e++])}}async touchNext(t=1){let e=0;for(;e++<t;){const t=this[this.length-1];if(t&&t.done)break;this.push(await this.iterator.next())}return this[this.length-1]}}class ct{constructor(t=[],e){this.resourceIds=t,this.generateMessages=e,this.ctxs=lt.from(this.generateMessages(this.resourceIds))}addResourceIds(t){return this.resourceIds.push(...t),this.onChange(),this.resourceIds.length}removeResourceIds(t){return this.resourceIds=this.resourceIds.filter(e=>!t.includes(e)),this.onChange(),this.resourceIds.length}async formatWithFallback(t,e){const n=[];for await(const r of this.ctxs){const s=dt(e,r,t,n);if(0===s.size)break;if("undefined"!=typeof console){const t=r.locales[0],e=Array.from(s).join(", ");console.warn(`Missing translations in ${t}: ${e}`)}}return n}formatMessages(t){return this.formatWithFallback(t,ht)}formatValues(t){return this.formatWithFallback(t,ft)}async formatValue(t,e){const[n]=await this.formatValues([{id:t,args:e}]);return n}handleEvent(){this.onChange()}onChange(){this.ctxs=lt.from(this.generateMessages(this.resourceIds)),this.ctxs.touchNext(2)}}function ft(t,e,n,r){const s=t.getMessage(n);return t.format(s,r,e)}function ht(t,e,n,r){const s=t.getMessage(n),o={value:t.format(s,r,e),attributes:null};if(s.attrs){o.attributes=[];for(const[n,a]of Object.entries(s.attrs)){const s=t.format(a,r,e);null!==s&&o.attributes.push({name:n,value:s})}}return o}function dt(t,e,n,r){const s=[],o=new Set;return n.forEach(({id:n,args:a},i)=>{void 0===r[i]&&(e.hasMessage(n)?(s.length=0,r[i]=t(e,s,n,a)):o.add(n))}),o}const mt="data-l10n-id",gt="data-l10n-args",pt=`[${mt}]`;async function wt(t,e){const n=new X([t]),r=await Promise.all(e.map(e=>(async function(t,e){const n=e.replace("{locale}",t);return(await fetch(n)).text()})(t,e)));for(const t of r)n.addMessages(t);return n}const bt={available:(yt=document.head).querySelector('meta[name="availableLanguages"]').getAttribute("content").split(",").map(t=>t.trim()),default:yt.querySelector('meta[name="defaultLanguage"]').getAttribute("content")};var yt;const vt=function(t){return Array.prototype.map.call(t.querySelectorAll('link[rel="localization"]'),t=>t.getAttribute("href"))}(document.head);document.l10n=new class extends ct{constructor(t,e){super(t,e),this.roots=new Set,this.pendingrAF=null,this.pendingElements=new Set,this.windowElement=null,this.mutationObserver=null,this.observerConfig={attribute:!0,characterData:!1,childList:!0,subtree:!0,attributeFilter:[mt,gt]}}onChange(){super.onChange(),this.translateRoots()}setAttributes(t,e,n){return t.setAttribute(mt,e),n?t.setAttribute(gt,JSON.stringify(n)):t.removeAttribute(gt),t}getAttributes(t){return{id:t.getAttribute(mt),args:JSON.parse(t.getAttribute(gt)||null)}}connectRoot(t){for(const e of this.roots)if(e===t||e.contains(t)||t.contains(e))throw new Error("Cannot add a root that overlaps with existing root.");if(this.windowElement){if(this.windowElement!==t.ownerDocument.defaultView)throw new Error("Cannot connect a root:\n          DOMLocalization already has a root from a different window.")}else this.windowElement=t.ownerDocument.defaultView,this.mutationObserver=new this.windowElement.MutationObserver(t=>this.translateMutations(t));this.roots.add(t),this.mutationObserver.observe(t,this.observerConfig)}disconnectRoot(t){return this.roots.delete(t),this.pauseObserving(),0===this.roots.size?(this.mutationObserver=null,this.windowElement=null,this.pendingrAF=null,this.pendingElements.clear(),!0):(this.resumeObserving(),!1)}translateRoots(){const t=Array.from(this.roots);return Promise.all(t.map(t=>this.translateFragment(t)))}pauseObserving(){this.mutationObserver&&(this.translateMutations(this.mutationObserver.takeRecords()),this.mutationObserver.disconnect())}resumeObserving(){if(this.mutationObserver)for(const t of this.roots)this.mutationObserver.observe(t,this.observerConfig)}translateMutations(t){for(const e of t)switch(e.type){case"attributes":e.target.hasAttribute("data-l10n-id")&&this.pendingElements.add(e.target);break;case"childList":for(const t of e.addedNodes)if(t.nodeType===t.ELEMENT_NODE)if(t.childElementCount)for(const e of this.getTranslatables(t))this.pendingElements.add(e);else t.hasAttribute(mt)&&this.pendingElements.add(t)}this.pendingElements.size>0&&null===this.pendingrAF&&(this.pendingrAF=this.windowElement.requestAnimationFrame(()=>{this.translateElements(Array.from(this.pendingElements)),this.pendingElements.clear(),this.pendingrAF=null}))}translateFragment(t){return this.translateElements(this.getTranslatables(t))}async translateElements(t){if(!t.length)return;const e=t.map(this.getKeysForElement),n=await this.formatMessages(e);return this.applyTranslations(t,n)}applyTranslations(t,e){this.pauseObserving();for(let n=0;n<t.length;n++)void 0!==e[n]&&tt(t[n],e[n]);this.resumeObserving()}getTranslatables(t){const e=Array.from(t.querySelectorAll(pt));return"function"==typeof t.hasAttribute&&t.hasAttribute(mt)&&e.push(t),e}getKeysForElement(t){return{id:t.getAttribute(mt),args:JSON.parse(t.getAttribute(gt)||null)}}}(vt,async function*(t){const e=l(navigator.languages,bt.available,{defaultLocale:bt.default});for(const n of e)yield await wt(n,t)}),window.addEventListener("languagechange",document.l10n),document.l10n.ready=function(){const t=document.readyState;return"interactive"===t||"completed"===t?Promise.resolve():new Promise(t=>document.addEventListener("readystatechange",t,{once:!0}))}().then(()=>(document.l10n.connectRoot(document.documentElement),document.l10n.translateRoots()))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,